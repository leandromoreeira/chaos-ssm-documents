---
schemaVersion: '0.3'
description: Execute a ramdom Network Corruption Stress via Run Command with tag filter
assumeRole: "{{AutomationAssumeRole}}"
parameters:
  AutomationAssumeRole:
    type: String
    description: "The ARN of the role that allows Automation to perform the actions on your behalf."
    default: ''
  TagName:
    type: String
    description: "The tag name to filter instances"
  TagValue:
    type: String
    description: "The tag value to filter instances"
  interface:
    type: String
    description: Specify the interface to add loss to. (Required)
    default: eth0
  corrupt:
    type: String
    description: The % of corrupt to add to the network.
    default: "5"
    # Corrupts 5% of packets
  duration:
    type: String
    description: The duration - in minutes - of the attack. (Required)
    default: "1"
mainSteps:
  - name: listInstances
    action: aws:executeAwsApi
    timeoutSeconds: 60
    inputs:
      Service: ec2
      Api: DescribeInstances
      Filters:
        - Name: instance-state-name
          Values: ["running"]
        - Name: tag:{{ TagName }}
          Values: ["{{ TagValue }}"]
    outputs:
      - Name: InstanceIds
        Selector: "$.Reservations..Instances..InstanceId"
        Type: StringList
  - name: SeletRandomInstance
    action: aws:executeScript
    inputs:
      Runtime: python3.6
      Handler: getRandomInstance
      InputPayload:
        InstanceIds:
          - "{{ listInstances.InstanceIds }}"
      Script: |-
        def getRandomInstance(events, context):
          import random
          InstanceId = random.choice(events['InstanceIds'])
          return { 'InstanceId' : InstanceId }
    outputs:
      - Name: InstanceId
        Selector: $.Payload.InstanceId
        Type: String

  - name: verifyInstanceStateRunningBefore
    action: aws:waitForAwsResourceProperty
    timeoutSeconds: 60
    inputs:
      Service: ec2
      Api: DescribeInstanceStatus
      InstanceIds:
        - "{{ SeletRandomInstance.InstanceId }}"
      PropertySelector: "$.InstanceStatuses[0].InstanceState.Name"
      DesiredValues:
        - running
  - name: RunChaosNetworkLossStress
    action: aws:runCommand
    maxAttempts: 1
    timeoutSeconds: 300
    onFailure: Abort
    inputs:
      DocumentName: ChaosSsm-NetworkCorruptionStress
      InstanceIds:
        - "{{ SeletRandomInstance.InstanceId }}"
      Parameters:
        interface: "{{ interface }}"
        corrupt: "{{ corrupt }}"
        duration: "{{ duration }}"
        InstallDependencies: "True"
  - name: verifyInstanceStateRunningAfter
    action: aws:waitForAwsResourceProperty
    timeoutSeconds: 60
    inputs:
      Service: ec2
      Api: DescribeInstanceStatus
      InstanceIds:
        - "{{ SeletRandomInstance.InstanceId }}"
      PropertySelector: "$.InstanceStatuses[0].InstanceState.Name"
      DesiredValues:
        - running
